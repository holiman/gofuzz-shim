// Code generated by gofuzz-shim; DO NOT EDIT.

//go:build ignore

package main

import (
	"runtime"
	"strings"
	"unsafe"

	target {{printf "%q" .PkgPath}}
	"github.com/holiman/gofuzz-shim/testing"
)

// #include <stdint.h>
import "C"

//export LLVMFuzzerTestOneInput
func LLVMFuzzerTestOneInput(data *C.char, size C.size_t) C.int {
	s := (*[1 << 30]byte)(unsafe.Pointer(data))[:size:size]
	defer catchPanics()
	LibFuzzer{{.Func}}(s)
	return 0
}

func LibFuzzer{{.Func}}(data []byte) int {
	fuzzer := testing.NewF(data)
	defer fuzzer.Finished()
	target.{{.Func}}(fuzzer)
	return 1
}

func catchPanics() {
	r := recover()
	if r == nil {
		return
	}
	var err string
	switch x := r.(type) {
	case string:
		err = x
	case error:
		err = x.Error()
	}
	if strings.Contains(err, "GO-FUZZ-BUILD-PANIC") {
		return
	}
	panic(err)
}

func main() {}
